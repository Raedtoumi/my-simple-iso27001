#!/usr/bin/env python3
import json
import os
from datetime import datetime

def generate_iso27001_2022_report(evidence):
    """G√©n√®re un rapport conforme √† la structure ISO 27001:2022"""
    
    rapport = {
        "date_generation": datetime.utcnow().isoformat(),
        "norme": "ISO 27001:2022",
        "structure": "4 groupes de contr√¥les (A.5, A.6, A.7, A.8)",
        "score_global": evidence.get('score_global', 0),
        "evaluation_groupes": evaluer_groupes_controles(evidence),
        "ecarts_principaux": identifier_ecarts_principaux(evidence),
        "recommandations_prioritaires": generer_recommandations_prioritaires(evidence),
        "plan_amelioration": generer_plan_amelioration(evidence)
    }
    
    return rapport

def evaluer_groupes_controles(evidence):
    """√âvalue chaque groupe de contr√¥les"""
    groupes = evidence.get('groupes_controles', {})
    evaluation = {}
    
    for groupe, controles in groupes.items():
        total_controles = len(controles)
        controles_implementes = sum(1 for c in controles.values() if c)
        score = (controles_implementes / total_controles) * 100 if total_controles > 0 else 0
        
        evaluation[groupe] = {
            "score": round(score, 1),
            "controles_implementes": controles_implementes,
            "total_controles": total_controles,
            "statut": "Conforme" if score >= 80 else "Partiellement conforme" if score >= 60 else "Non conforme",
            "controles_cles": identifier_controles_cles(groupe, controles)
        }
    
    return evaluation

def identifier_controles_cles(groupe, controles):
    """Identifie les contr√¥les cl√©s par groupe"""
    controles_cles = {
        "A.5": ["A.5.1", "A.5.2", "A.5.3", "A.5.7"],
        "A.6": ["A.6.1", "A.6.2", "A.6.3"],
        "A.7": ["A.7.1", "A.7.2", "A.7.3"],
        "A.8": ["A.8.1", "A.8.2", "A.8.7", "A.8.8"]
    }
    
    resultat = {}
    for controle in controles_cles.get(groupe, []):
        if controle in controles:
            resultat[controle] = {
                "implemente": controles[controle],
                "description": get_controle_description(controle)
            }
    
    return resultat

def get_controle_description(code_controle):
    """Retourne la description du contr√¥le"""
    descriptions = {
        "A.5.1": "Politiques de s√©curit√© de l'information",
        "A.5.2": "R√¥les et responsabilit√©s en mati√®re de s√©curit√©",
        "A.5.3": "S√©paration des fonctions",
        "A.5.7": "Renseignement sur les menaces",
        "A.6.1": "V√©rification pr√©alable du personnel",
        "A.6.2": "Conditions d'emploi",
        "A.6.3": "Sensibilisation, √©ducation et formation",
        "A.7.1": "P√©rim√®tre de s√©curit√© physique",
        "A.7.2": "Contr√¥les des entr√©es physiques",
        "A.7.3": "S√©curisation des bureaux et salles",
        "A.8.1": "Dispositifs des utilisateurs finaux",
        "A.8.2": "Droits d'acc√®s privil√©gi√©s",
        "A.8.7": "Protection contre les codes malveillants",
        "A.8.8": "Gestion des vuln√©rabilit√©s techniques"
    }
    return descriptions.get(code_controle, "Contr√¥le non document√©")

def identifier_ecarts_principaux(evidence):
    """Identifie les √©carts principaux"""
    groupes = evidence.get('groupes_controles', {})
    ecarts = []
    
    for groupe, controles in groupes.items():
        for code_controle, implemente in controles.items():
            if not implemente and code_controle in [
                "A.5.1", "A.5.2", "A.6.3", "A.8.2", "A.8.7", "A.8.8"
            ]:
                ecarts.append({
                    "groupe": groupe,
                    "controle": code_controle,
                    "description": get_controle_description(code_controle),
                    "priorite": "√âlev√©e" if code_controle in ["A.5.1", "A.8.7"] else "Moyenne"
                })
    
    return ecarts[:5]  # Retourne les 5 premiers √©carts

def generer_recommandations_prioritaires(evidence):
    """G√©n√®re des recommandations prioritaires"""
    return [
        "Impl√©menter les politiques de s√©curit√© (A.5.1)",
        "D√©finir les r√¥les et responsabilit√©s de s√©curit√© (A.5.2)",
        "Mettre en place un programme de sensibilisation (A.6.3)",
        "G√©rer les droits d'acc√®s privil√©gi√©s (A.8.2)",
        "Prot√©ger contre les codes malveillants (A.8.7)",
        "G√©rer les vuln√©rabilit√©s techniques (A.8.8)"
    ]

def generer_plan_amelioration(evidence):
    """G√©n√®re un plan d'am√©lioration"""
    return {
        "phase_1_30_jours": [
            "Cr√©er la politique de s√©curit√© de l'information",
            "Documenter les r√¥les et responsabilit√©s",
            "Mettre en place la gestion des acc√®s privil√©gi√©s"
        ],
        "phase_2_60_jours": [
            "Impl√©menter la protection anti-malware",
            "D√©marrer le programme de sensibilisation",
            "√âtablir la gestion des vuln√©rabilit√©s"
        ],
        "phase_3_90_jours": [
            "Auditer l'ensemble des contr√¥les",
            "Pr√©parer la revue de direction",
            "Planifier la certification ISO 27001"
        ]
    }

def main():
    print("üìä G√©n√©ration du rapport ISO 27001:2022...")
    print("üèóÔ∏è Structure: 4 groupes de contr√¥les (A.5, A.6, A.7, A.8)")
    
    # Charger les preuves
    try:
        with open('evidence/iso27001_2022_correct_evidence.json', 'r') as f:
            evidence = json.load(f)
    except FileNotFoundError:
        print("‚ùå Fichier de preuves non trouv√©. Ex√©cutez d'abord collect_evidence.py")
        return
    
    # G√©n√©rer le rapport
    rapport = generate_iso27001_2022_report(evidence)
    
    # Sauvegarder les rapports
    os.makedirs('reports', exist_ok=True)
    
    with open('reports/iso27001_2022_correct_rapport.json', 'w') as f:
        json.dump(rapport, f, indent=2, ensure_ascii=False)
    
    # G√©n√©rer le r√©sum√© ex√©cutif
    generate_executive_summary(rapport)
    
    print("‚úÖ Rapport ISO 27001:2022 g√©n√©r√©!")
    print(f"üéØ Score global: {rapport['score_global']}%")
    print(f"üìä Groupes √©valu√©s: {len(rapport['evaluation_groupes'])}")
    print(f"‚ö†Ô∏è √âcarts identifi√©s: {len(rapport['ecarts_principaux'])}")

def generate_executive_summary(rapport):
    """G√©n√®re un r√©sum√© ex√©cutif"""
    with open('reports/iso27001_2022_correct_resume.md', 'w') as f:
        f.write("# Rapport de Conformit√© ISO 27001:2022\n\n")
        f.write("**Structure: 4 groupes de contr√¥les**\n\n")
        f.write(f"**Date**: {rapport['date_generation']}\n\n")
        
        f.write(f"## üéØ Score Global: {rapport['score_global']}%\n\n")
        
        f.write("## üìä √âvaluation par Groupe\n\n")
        for groupe, details in rapport['evaluation_groupes'].items():
            statut_emoji = "‚úÖ" if details['statut'] == "Conforme" else "‚ö†Ô∏è" if details['statut'] == "Partiellement conforme" else "‚ùå"
            f.write(f"{statut_emoji} **{groupe}**: {details['score']}% ({details['controles_implementes']}/{details['total_controles']} contr√¥les)\n")
        
        f.write(f"\n## ‚ö†Ô∏è √âcarts Prioritaires\n\n")
        for ecart in rapport['ecarts_principaux']:
            f.write(f"- **{ecart['controle']}**: {ecart['description']} ({ecart['priorite']})\n")
        
        f.write(f"\n## üöÄ Plan d'Am√©lioration\n\n")
        f.write("**Phase 1 (30 jours):**\n")
        for action in rapport['plan_amelioration']['phase_1_30_jours']:
            f.write(f"- {action}\n")

if __name__ == "__main__":
    main()